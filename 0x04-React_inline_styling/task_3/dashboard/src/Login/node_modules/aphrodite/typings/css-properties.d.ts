/*
based on [CSSProperties from Galmorous Typings](https://github.com/paypal/glamorous/blob/master/typings/css-properties.d.ts)
The MIT License (MIT)
Copyright (c) 2017 PayPal

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import { FontFamily } from './font-family';
// See CSS 3 CSS-wide keywords https://www.w3.org/TR/css3-values/#common-keywords
// See CSS 3 Explicit Defaulting https://www.w3.org/TR/css-cascade-3/#defaulting-keywords
// "all CSS properties can accept these values"
type CSSWideKeyword = 'initial' | 'inherit' | 'unset';

export interface CSSPropertiesComplete {
    /**
     * Aligns a flex container's lines within the flex container when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.
     */
    alignContent?:
        | CSSWideKeyword
        | 'flex-start'
        | 'flex-end'
        | 'center'
        | 'space-between'
        | 'space-around'
        | 'stretch';

    /**
     * Sets the default alignment in the cross axis for all of the flex container's items, including anonymous flex items, similarly to how justify-content aligns items along the main axis.
     */
    alignItems?:
        | CSSWideKeyword
        | 'flex-start'
        | 'flex-end'
        | 'center'
        | 'baseline'
        | 'stretch';

    /**
     * Allows the default alignment to be overridden for individual flex items.
     */
    alignSelf?:
        | CSSWideKeyword
        | 'auto'
        | 'flex-start'
        | 'flex-end'
        | 'center'
        | 'baseline'
        | 'stretch';

    /**
     * This property allows precise alignment of elements, such as graphics, that do not have a baseline-table or lack the desired baseline in their baseline-table. With the alignment-adjust property, the position of the baseline identified by the alignment-baseline can be explicitly determined. It also determines precisely the alignment point for each glyph within a textual element.
     */
    alignmentAdjust?: CSSWideKeyword | string | number;

    alignmentBaseline?:
        | CSSWideKeyword
        | 'auto'
        | 'baseline'
        | 'before-edge'
        | 'text-before-edge'
        | 'middle'
        | 'central'
        | 'after-edge'
        | 'text-after-edge'
        | 'ideographic'
        | 'alphabetic'
        | 'hanging'
        | 'mathematical'
        | 'use-script';

    /**
     * Defines a length of time to elapse before an animation starts, allowing an animation to begin execution some time after it is applied.
     */
    animationDelay?: CSSWideKeyword | string | number;

    /**
     * Defines whether an animation should run in reverse on some or all cycles.
     */
    animationDirection?:
        | CSSWideKeyword
        | 'normal'
        | 'reverse'
        | 'alternate'
        | 'alternate-reverse';

    /**
     * Specifies how many times an animation cycle should play.
     */
    animationIterationCount?: CSSWideKeyword | 'infinite' | number;

    /**
     * Defines the list of animations that apply to the element.
     */
    animationName?: CSSWideKeyword | string | any[] | any;

    /**
     * Defines whether an animation is running or paused.
     */
    animationPlayState?: CSSWideKeyword | 'running' | 'paused';

    /**
     * Allows changing the style of any element to platform-based interface elements or vice versa.
     */
    appearance?: CSSWideKeyword | 'auto' | 'none';

    /**
     * Determines whether or not the “back” side of a transformed element is visible when facing the viewer.
     */
    backfaceVisibility?: CSSWideKeyword | 'visible' | 'hidden';

    /**
     * Shorthand property to set the values for one or more of:
     * background-clip, background-color, background-image,
     * background-origin, background-position, background-repeat,
     * background-size, and background-attachment.
     */
    background?: CSSWideKeyword | string;

    /**
     * If a background-image is specified, this property determines
     * whether that image's position is fixed within the viewport,
     * or scrolls along with its containing block.
     * See CSS 3 background-attachment property https://drafts.csswg.org/css-backgrounds-3/#the-background-attachment
     */
    backgroundAttachment?: CSSWideKeyword | 'scroll' | 'fixed' | 'local';

    /**
     * This property describes how the element's background images should blend with each other and the element's background color.
     * The value is a list of blend modes that corresponds to each background image. Each element in the list will apply to the corresponding element of background-image. If a property doesn’t have enough comma-separated values to match the number of layers, the UA must calculate its used value by repeating the list of values until there are enough.
     */
    backgroundBlendMode?:
        | CSSWideKeyword
        | 'normal'
        | 'multiply'
        | 'screen'
        | 'overlay'
        | 'darken'
        | 'lighten'
        | 'color-dodge'
        | 'color-burn'
        | 'hard-light'
        | 'soft-light'
        | 'difference'
        | 'exclusion'
        | 'hue'
        | 'saturation'
        | 'color'
        | 'luminosity';

    /**
     * Sets the background color of an element.
     */
    backgroundColor?: CSSWideKeyword | string;

    backgroundComposite?: CSSWideKeyword | string;

    /**
     * Applies one or more background images to an element. These can be any valid CSS image, including url() paths to image files or CSS gradients.
     */
    backgroundImage?: CSSWideKeyword | string;

    /**
     * Specifies what the background-position property is relative to.
     */
    backgroundOrigin?: CSSWideKeyword | 'border-box' | 'padding-box' | 'content-box';

    /**
     * Sets the position of a background image.
     */
    backgroundPosition?: CSSWideKeyword | string | number;

    /**
     * Background-repeat defines if and how background images will be repeated after they have been sized and positioned
     */
    backgroundRepeat?: CSSWideKeyword | string;

    /**
     * Obsolete - spec retired, not implemented.
     */
    baselineShift?: CSSWideKeyword | string | number;

    /**
     * Non standard. Sets or retrieves the location of the Dynamic HTML (DHTML) behavior.
     */
    behavior?: CSSWideKeyword | string;

    /**
     * Shorthand property that defines the different properties of all four sides of an element's border in a single declaration. It can be used to set border-width, border-style and border-color, or a subset of these.
     */
    border?: CSSWideKeyword | string | number;

    /**
     * Shorthand that sets the values of border-bottom-color,
     * border-bottom-style, and border-bottom-width.
     */
    borderBottom?: CSSWideKeyword | string | number;

    /**
     * Sets the color of the bottom border of an element.
     */
    borderBottomColor?: CSSWideKeyword | string;

    /**
     * Defines the shape of the border of the bottom-left corner.
     */
    borderBottomLeftRadius?: CSSWideKeyword | string | number;

    /**
     * Defines the shape of the border of the bottom-right corner.
     */
    borderBottomRightRadius?: CSSWideKeyword | string | number;

    /**
     * Sets the line style of the bottom border of a box.
     */
    borderBottomStyle?:
        | CSSWideKeyword
        | 'none'
        | 'hidden'
        | 'dotted'
        | 'dashed'
        | 'solid'
        | 'double'
        | 'groove'
        | 'ridge'
        | 'inset'
        | 'outset';

    /**
     * Sets the width of an element's bottom border. To set all four borders, use the border-width shorthand property which sets the values simultaneously for border-top-width, border-right-width, border-bottom-width, and border-left-width.
     */
    borderBottomWidth?: CSSWideKeyword | string | number;

    /**
     * Border-collapse can be used for collapsing the borders between table cells
     */
    borderCollapse?: CSSWideKeyword | 'collapse' | 'separate';

    /**
     * The CSS border-color property sets the color of an element's four borders. This property can have from one to four values, made up of the elementary properties:
     *      •       border-top-color
     *      •       border-right-color
     *      •       border-bottom-color
     *      •       border-left-color The default color is the currentColor of each of these values.
     * If you provide one value, it sets the color for the element. Two values set the horizontal and vertical values, respectively. Providing three values sets the top, vertical, and bottom values, in that order. Four values set all for sides: top, right, bottom, and left, in that order.
     */
    borderColor?: CSSWideKeyword | string;

    /**
     * Specifies different corner clipping effects, such as scoop (inner curves), bevel (straight cuts) or notch (cut-off rectangles). Works along with border-radius to specify the size of each corner effect.
     */
    borderCornerShape?: CSSWideKeyword | string;

    /**
     * The property border-image-source is used to set the image to be used instead of the border style. If this is set to none the border-style is used instead.
     */
    borderImageSource?: CSSWideKeyword | string | number;

    /**
     * The border-image-width CSS property defines the offset to use for dividing the border image in nine parts, the top-left corner, central top edge, top-right-corner, central right edge, bottom-right corner, central bottom edge, bottom-left corner, and central right edge. They represent inward distance from the top, right, bottom, and left edges.
     */
    borderImageWidth?: CSSWideKeyword | string | number;

    /**
     * Shorthand property that defines the border-width, border-style and border-color of an element's left border in a single declaration. Note that you can use the corresponding longhand properties to set specific individual properties of the left border — border-left-width, border-left-style and border-left-color.
     */
    borderLeft?: CSSWideKeyword | string | number;

    /**
     * The CSS border-left-color property sets the color of an element's left border. This page explains the border-left-color value, but often you will find it more convenient to fix the border's left color as part of a shorthand set, either border-left or border-color.
     * Colors can be defined several ways. For more information, see Usage.
     */
    borderLeftColor?: CSSWideKeyword | string;

    /**
     * Sets the style of an element's left border. To set all four borders, use the shorthand property, border-style. Otherwise, you can set the borders individually with border-top-style, border-right-style, border-bottom-style, border-left-style.
     */
    borderLeftStyle?:
        | CSSWideKeyword
        | 'none'
        | 'hidden'
        | 'dotted'
        | 'dashed'
        | 'solid'
        | 'double'
        | 'groove'
        | 'ridge'
        | 'inset'
        | 'outset';

    /**
     * Sets the width of an element's left border. To set all four borders, use the border-width shorthand property which sets the values simultaneously for border-top-width, border-right-width, border-bottom-width, and border-left-width.
     */
    borderLeftWidth?: CSSWideKeyword | string | number;

    /**
     * Sets the width of an element's border radius.
     */
    borderRadius?: CSSWideKeyword | string | number;

    /**
     * Shorthand property that defines the border-width, border-style and border-color of an element's right border in a single declaration. Note that you can use the corresponding longhand properties to set specific individual properties of the right border — border-right-width, border-right-style and border-right-color.
     */
    borderRight?: CSSWideKeyword | string | number;

    /**
     * Sets the color of an element's right border. This page explains the border-right-color value, but often you will find it more convenient to fix the border's right color as part of a shorthand set, either border-right or border-color.
     * Colors can be defined several ways. For more information, see Usage.
     */
    borderRightColor?: CSSWideKeyword | string;

    /**
     * Sets the style of an element's right border. To set all four borders, use the shorthand property, border-style. Otherwise, you can set the borders individually with border-top-style, border-right-style, border-bottom-style, border-left-style.
     */
    borderRightStyle?:
        | CSSWideKeyword
        | 'none'
        | 'hidden'
        | 'dotted'
        | 'dashed'
        | 'solid'
        | 'double'
        | 'groove'
        | 'ridge'
        | 'inset'
        | 'outset';

    /**
     * Sets the width of an element's right border. To set all four borders, use the border-width shorthand property which sets the values simultaneously for border-top-width, border-right-width, border-bottom-width, and border-left-width.
     */
    borderRightWidth?: CSSWideKeyword | string | number;

    /**
     * Specifies the distance between the borders of adjacent cells.
     */
    borderSpacing?: CSSWideKeyword | string | number;

    /**
     * Sets the style of an element's four borders. This property can have from one to four values. With only one value, the value will be applied to all four borders; otherwise, this works as a shorthand property for each of border-top-style, border-right-style, border-bottom-style, border-left-style, where each border style may be